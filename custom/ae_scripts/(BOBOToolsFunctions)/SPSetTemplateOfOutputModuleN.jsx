/*SPAddProxyOutputToModuleRenderQueueItems()Adds a new output module and makes a sub directory "proxy"Written by Dnaiel Harkness, Spinifex Group, 2013*/{		function SPSetTempalteOfOutputModuleN()	{		var scriptName = "Set Template of Output Module N";		var currentProject = app.project ;		var myQueue = currentProject.renderQueue;				// Check a project is open		if (!currentProject)		{			alert ("A project must be open to use this script.", scriptName);			return;		}			// Check for items in render queue		if (myQueue.numItems < 1)		{			alert("You do not have any items set to render.", scriptName);				return;		}		var queuedRenderItems = 0;		var maxOutputModules = 0;				// Cycle through render queue and check if any queued items		for (var i=1,len=myQueue.numItems; i<=len; i++)		{			var RQItem = myQueue.item(i);			// Can only modify queued items			if (RQItem.status == RQItemStatus.QUEUED)			{				queuedRenderItems++;				if ( maxOutputModules < RQItem.numOutputModules) { maxOutputModules = RQItem.numOutputModules; }			}		}		if (queuedRenderItems == 0)		{			alert("There are no queued render items. The path is set on queued renders only.", scriptName);			return;		}			// Make variables for interface		var outputTemplates = myQueue.item(1).outputModule(1).templates;		outputTemplates.splice(-6,6); //get rid of hidden adobe values		var outputModules = [];		for (var i=1,len=maxOutputModules;i<=maxOutputModules;i++){			outputModules.push(i.toString());		}		// Build Interface		var myPalette = new Window("dialog",scriptName,undefined);		myPalette.orientation = "column";		var controlGroup = myPalette.add("group",undefined,"controlGroup");		controlGroup.orientation = "column";		controlGroup.alignChildren = ["left","top"];			var whichModuleDropdown = controlGroup.add("dropdownlist",undefined,outputModules);			whichModuleDropdown.title = "Output Module:";			whichModuleDropdown.selection = 0;			var templatesDropDown = controlGroup.add("dropdownlist",undefined,outputTemplates);			templatesDropDown.title = "Output Template:";			templatesDropDown.selection = 0;		var buttonGroup = myPalette.add("group",undefined,"buttonGroup");		buttonGroup.orientation = "row";			var cancelButton = buttonGroup.add("button",undefined,"Cancel");			var okButton = buttonGroup.add("button",undefined,"OK");			var shouldContinue = true;			cancelButton.onClick = function(){				shouldContinue = false;				myPalette.close();				return;			}									//SHow the window			myPalette.center();		myPalette.show();		// Cycle through render queue		if (shouldContinue) {			app.beginUndoGroup(scriptName);			var shouldShowSkipAlert = false;			var skipMessage = "The following items were skipped. They didn't contain an output module at index:\n";			var whichOM = parseInt( whichModuleDropdown.selection.text);			var whichTemplate = templatesDropDown.selection.text;			for (var i=1,lenI=myQueue.numItems; i<=lenI; i++)			{				var RQItem = myQueue.item(i);				// Can only modify queued items				if (RQItem.status == RQItemStatus.QUEUED)				{										if (RQItem.numOutputModules < whichOM)					{						shouldShowSkipAlert = true;						skipMessage = skipMessage + RQItem.comp.name + "\n\n";					}					else					{						RQItem.outputModules[whichOM].applyTemplate(whichTemplate);					}										}			}			app.endUndoGroup();			myPalette.close();			if (shouldShowSkipAlert){				alert(skipMessage, scriptName);			}		}	}	SPSetTempalteOfOutputModuleN();}