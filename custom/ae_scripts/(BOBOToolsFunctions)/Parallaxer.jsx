// 2D Parallaxer v1.0.1// Shawn Sheehan 2014 (www.shawn-sheehan.com)// This Extendscript is intended for use with Adobe After Effects to create a customizable// side-scrolling animation simulating "parallax" without adding an After Effects Camera.// script installation shown at http://helpx.adobe.com/after-effects/using/scripts.htmltry{    // variables    var proj, preCompAry, inPointTime, curComp, selectedComp, preCompNum, preCompInt, multiVelocity, panningName, multiName, compName, compTypeName, compTypes;    var folderTypes, motionFolder, offsetFolder, depthFolder, baseFolder, baseComps, depthComps, offsetComps, baseLayers, depthLayers, offsetLayers;    var textNum, baseCompLayers, depthCompLayers, offsetCompLayers, selectedCompLayers;    var selectedCompNull, depthNull, offsetVelExpress, depthVelCode, depthVelExpress, nullExpressCode, nullExpress, preCompCountBack;    var totalLayers, curLayer, foundNullLayer, pushedLayer;    proj = app.project;    preCompAry =new Array();    inPointTime = 0;    // make sure a comp is selected    function parallaxer(){        curComp = proj.activeItem;        if (!(curComp instanceof CompItem)){                alert("Please select a composition.");                return;        }else{            selectedComp = curComp;            }                        // create a variable from the confirm prompt that is true or false; horizontal is true (yes), vertical is false (no)            var parallaxHor = confirm("Do you want horizontal parallax?\rClicking 'No' creates vertical parallax.");            compName = prompt("Rename your Composition (no quotes or apostrophes).", "2D PARALLAXER");                        // user inputs number of parallaxing layers            preCompNum = prompt("Set your number of parallaxing layers.", "5");            while(isNaN(preCompNum) || preCompNum < 2){                preCompNum = prompt("Must be an integer greater than 1.", "5");                }                        // layer value set as an integer            preCompInt = Math.round(preCompNum);                        multiVelocity = prompt("Set the Velocity Multiplier.", "1");            while(isNaN(multiVelocity) || multiVelocity <= 0){                multiVelocity = prompt("Must be a number greater than 0.", "1");                }            compTypes = new Array("MOTION","OFFSET","DEPTH","BASE");            panningName = "PANNING";            multiName = "MULTIPLIER";            // selected comp variables            var oldName = selectedComp.name.toString();            var newCompName = compName + " MAIN COMP";            var newCompWidth = selectedComp.width;            var newCompHeight = selectedComp.height;             var newCompPAR = selectedComp.pixelAspect;            var newCompDur = selectedComp.duration;            var newCompFPS = selectedComp.frameRate;             var multiCompDur = newCompDur;            var backgrdColor = new Array(0,0,0);                        app.beginUndoGroup("add 2D Parallaxer");                        // renames the comp            writeLn("Updating selected comp.");            selectedComp.name = newCompName;                        // fills an array with the proper precomp number incrementally - array value 0 is filled with 1, array value 1 is filled with 2, etc.            preCompAry[preCompAry.length] = preCompInt;            for(var d=0; d< preCompInt; d++){                var e = d+1;                preCompAry[d] = e;                }                        // sets the background color of the selected comp to black            selectedComp.bgColor = backgrdColor;                        // adding the null controller to the selected comp at 0 seconds            selectedCompNull = selectedComp.layers.addNull();            selectedCompNull.inPoint = inPointTime;            selectedCompNull.enabled = false;            selectedCompNull.Effects.addProperty("Slider Control")("Slider");            selectedCompNull.property("Effects").property("Slider Control").name = panningName;            selectedCompNull.Effects.addProperty("Slider Control")("Slider");            selectedCompNull.property("Effects").property("Slider Control").name = multiName;            selectedCompNull.property("Effects").property(multiName)("Slider").setValue(multiVelocity);                                    // names the null object            selectedCompNull.name = "2D PARALLAXER CONTROLS";            writeLn("Null added.");            // comp arrays to store comps for precomping            baseComps = new Array();            depthComps = new Array();            offsetComps = new Array();            // creates folder structure            motionFolder = proj.items.addFolder(compName.toString() + " " + compTypes[0] + " PRECOMPS");            offsetFolder = proj.items.addFolder(compName.toString() + " " + compTypes[1] + " PRECOMPS");            offsetFolder.parentFolder = motionFolder;            depthFolder = proj.items.addFolder(compName.toString() + " " + compTypes[2] + " PRECOMPS");            depthFolder.parentFolder = motionFolder;            baseFolder = proj.items.addFolder(compName.toString() + " FOOTAGE PRECOMPS");            folderTypes = new Array(motionFolder, offsetFolder, depthFolder, baseFolder);            writeLn("Folder structure created.");            // add comps - count down thru 4 comp names - index[0] in array should NOT be called            for(var i = 1; i < compTypes.length; i++){                                // creates comp name                compTypeName = compName + " " + compTypes[i];                                // generates the comps - index[0] in array should NOT be called                for(var a = 1; a <= preCompInt; a++){                    var b = proj.items.addComp(compTypeName + " " + a.toString(), newCompWidth, newCompHeight, newCompPAR, multiCompDur, newCompFPS);                    b.bgColor = backgrdColor;                    // put comps in proper folders                    b.parentFolder = folderTypes[i];                    // populates proper array with proper comp                    if(i == 1){                       offsetComps[offsetComps.length] = b;                        }                    if(i == 2){                       depthComps[depthComps.length] = b;                        }                     if(i == 3){                       baseComps[baseComps.length] = b;                        }                    }                }            writeLn("Comps added.");            // for loop to add the comps as precomps to their proper parent comps            preCompCountBack = preCompInt-1;            for(var c = preCompCountBack; 0 <= c; c--){                                // giving the comps in the arrays their own layer attribute                baseCompLayers = baseComps[c].layers;                offsetCompLayers = offsetComps[c].layers;                depthCompLayers = depthComps[c].layers;                                // base layer text added and set to start at 0 seconds                textNum = c+1;                baseLayers = baseCompLayers.addText("0" + textNum.toString());                                // resetting base layer text properties                var textProperty = baseLayers.property("Source Text");                var textPropertyValue = textProperty.value;                              // changing base layer source text settings                textPropertyValue.resetCharStyle();                textPropertyValue.fontSize = 200;                textPropertyValue.fillColor = [1, 1, 1];                textPropertyValue.justification = ParagraphJustification.CENTER_JUSTIFY;                textProperty.setValue(textPropertyValue);                            baseLayers.inPoint = inPointTime;                                // precomps added and set to start at 0 seconds                offsetLayers = offsetCompLayers.add(baseComps[c]);                offsetLayers.inPoint = inPointTime;                depthLayers = depthCompLayers.add(offsetComps[c]);                depthLayers.inPoint = inPointTime;                writeLn("Precomp added.");                // expressions defined                depthVelCode = "V = (thisComp.layer('"+ selectedCompNull.name +"').effect('"+ panningName +"')('Slider')/"+ preCompAry[c] +")*(thisComp.layer('2D PARALLAXER CONTROLS').effect('MULTIPLIER')('Slider'));";                if(parallaxHor == true){                    //horizontal variables                    offsetVelExpress = "V = comp('"+ newCompName +"').layer('"+ selectedCompNull.name +"').effect('"+ panningName +"')('Slider')/"+ preCompAry[c] +";\n[V,value[1]]";                    depthVelExpress = depthVelCode +"\n[V, value[1]]";                                        // precomps and expressions added to selected comp                    depthLayers.Effects.addProperty("Offset").property("Shift Center To").expression = offsetVelExpress;                    selectedCompLayers = selectedComp.layers.add(depthComps[c]);                    writeLn("Precomp added.");                    selectedCompLayers.inPoint = inPointTime;                    selectedCompLayers.Effects.addProperty("Offset").property("Shift Center To").expression = depthVelExpress;                                        // depth null expressions defined                    nullExpressCode = "M = (thisComp.layer('"+ selectedCompNull.name +"').effect('"+ panningName +"')('Slider')/"+ preCompAry[c] +")";                    nullExpress = depthVelCode + "\n"+ nullExpressCode +";\n[V+M,value[1]]";                    }else{                        // vertical variables                        offsetVelExpress = "V = comp('"+ newCompName +"').layer('"+ selectedCompNull.name +"').effect('"+ panningName +"')('Slider')/"+ preCompAry[c] +";\n[value[0],V]";                        depthVelExpress = depthVelCode +"\n[value[0],V]";                                                // precomps and expressions added to selected comp                        depthLayers.Effects.addProperty("Offset").property("Shift Center To").expression = offsetVelExpress;                        selectedCompLayers = selectedComp.layers.add(depthComps[c]);                        writeLn("Precomp added.");                        selectedCompLayers.inPoint = inPointTime;                        selectedCompLayers.Effects.addProperty("Offset").property("Shift Center To").expression = depthVelExpress;                                                // depth null expressions defined                        nullExpressCode = "M = (thisComp.layer('"+ selectedCompNull.name +"').effect('"+ panningName +"')('Slider')/"+ preCompAry[c] +")";                        nullExpress = depthVelCode + "\n"+ nullExpressCode +";\n[value[0],V+M]";                        }                // depth nulls added                depthNull = selectedComp.layers.addNull();                depthNull.inPoint = inPointTime;                depthNull.enabled = false;                depthNull.name = "Depth Null "+ textNum;                depthNull.property("Position").expression = nullExpress;                writeLn("Depth Null added.");                }                        writeLn("Precomping done.");            // push the null controller to the top of the layer stack            totalLayers = selectedComp.numLayers;            for(var f=1; f <= totalLayers; f++){                curLayer = selectedComp.layer(f);                if(curLayer.name == selectedCompNull.name){                    foundNullLayer = curLayer                                        }                }            pushedLayer = foundNullLayer.moveToBeginning();            selectedComp.openInViewer();            writeLn("Script finished.");                                app.endUndoGroup();                        alert(oldName.toString() + " is now called "+ newCompName.toString() +".");    }    parallaxer(); }catch(err){     alert("Error at line #" + err.line.toString() + "\r" + err.toString()); }