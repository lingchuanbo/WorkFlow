/*SPCreateWipRender()Render WIP render from selected compsWritten by Daniel Harkness, Spinifex Group, 2013*/{	function SPCreateWipRenderForSelectedComps()	{		var scriptName = "Create Wip Render For Selected Comps ";				// Check a project is open		if (!app.project)		{			alert ("A project must be open to use this script.", scriptName);			return;		}			var selectedItems = app.project.selection;					var projectPath = app.project.file.fsName.replace("\\","/").replace("//","/");		var projectPathArray = projectPath.split("/");		projectPathArray.splice(0,1);				var didFindStudioFolder = false;		while (projectPathArray.length > 0 ){			var lastArrayItem = projectPathArray.pop();			// Check for spinifex fodler structure and break when found			if (lastArrayItem== "2D"){				didFindStudioFolder = true;				projectPathArray.push("2D");				break;			}		}		if (projectPathArray.length == 0){			alert ("Project doesn't exist in a Spinifex 2_Studio/2D project folder.", scriptName);			return;		}								//only continue if spin fodler structure correct				if (didFindStudioFolder){			// Get Today			var today = new Date();			var dd = today.getDate();			var mm = today.getMonth()+1; //January is 0!			var yyyy = today.getFullYear();			if(dd<10){dd='0'+dd} if(mm<10){mm='0'+mm} today = yyyy+mm+dd;					// Make dated fodler in WIP			var wipFolderPath = "/" + projectPathArray.join("/") +"/_Renders/WIP/" + today;			var wipFolder = new Folder (wipFolderPath);						var renderQueueItems = [];			var didFindCompsInSelection = false;			for (var i=0,len=selectedItems.length; i<len; i++)			{				var comp = selectedItems[i];				if ( comp instanceof CompItem ){					didFindCompsInSelection = true;					var RQItem = app.project.renderQueue.items.add(comp);					renderQueueItems.push (RQItem);					var lastOMItem = RQItem.outputModules[1];					var renderFilePath = wipFolderPath + "/" + comp.name + "_" + today + "_01";					var renderFile = new File (renderFilePath);					lastOMItem.file = renderFile;									}			}			if (!didFindCompsInSelection){				alert ("You need to select comps in the project panel to use this script.", scriptName);				return;			}			app.beginUndoGroup(scriptName);			// Create the WIP folder			wipFolder.create()			// Make variables for interface						var renderTemplates = renderQueueItems[0].templates;			renderTemplates.splice(-1,1); //get rid of hidden adobe values			var outputTemplates = renderQueueItems[0].outputModule(1).templates;			outputTemplates.splice(-6,6); //get rid of hidden adobe values			// Build Interface			var myPalette = new Window("dialog",scriptName,undefined);			myPalette.orientation = "column";			var controlGroup = myPalette.add("group",undefined,"controlGroup");			controlGroup.orientation = "column";			controlGroup.alignChildren = ["left","top"];				var renderTemplateDropdown = controlGroup.add("dropdownlist",undefined,renderTemplates);				renderTemplateDropdown.title = "Render Template:";				renderTemplateDropdown.selection = 0;				var outputTemplateDropDown = controlGroup.add("dropdownlist",undefined,outputTemplates);				outputTemplateDropDown.title = "Output Template:";				outputTemplateDropDown.selection = 0;			var buttonGroup = myPalette.add("group",undefined,"buttonGroup");			buttonGroup.orientation = "row";				var cancelButton = buttonGroup.add("button",undefined,"Cancel");				var okButton = buttonGroup.add("button",undefined,"OK");				var shouldContinue = true;				cancelButton.onClick = function(){					shouldContinue = false;					myPalette.close();					return;				}												//SHow the window				myPalette.center();			myPalette.show();			// Cycle through render queue			if (shouldContinue) {				var whichRenderTemplate = renderTemplateDropdown.selection.text;				var whichOutputTemplate = outputTemplateDropDown.selection.text;				var defaultOutputTemplateIsMovie = true;				var outputExt = ""				for (var i=0,lenI=renderQueueItems.length; i<lenI; i++)				{					renderQueueItems[i].applyTemplate(whichRenderTemplate);					renderQueueItems[i].outputModule(1).applyTemplate(whichOutputTemplate);										// Check if we're rendering QTs					var outputPath = renderQueueItems[i].outputModule(1).file.fsName;					var index = outputPath.lastIndexOf( "\\" );					var outputFile = outputPath.substring( index + 1, outputPath.length );					index = outputFile.lastIndexOf( "." );					var outputPrefix = outputFile.substring( 0, index );					outputExt = outputFile.substring( index + 1, outputFile.length );									//Check if file exists					var j=1;					while (renderQueueItems[i].outputModule(1).file.exists)					{						// remover version number and add an new one						outputPrefix = outputPrefix.substring (0,outputPrefix.length-2);						var jString = j;						if (jString<10) {jString='0'+jString;}						outputPrefix = outputPrefix+jString;						var renderFile = new File (outputPrefix + "." + outputExt);						renderQueueItems[i].outputModule(1).file = renderFile;						j++;					}									// Delete if not a movie					if (!IsMovieFormat( outputExt ))					{						defaultOutputTemplateIsMovie = false;						renderQueueItems[i].remove();					}				}				myPalette.close();				if (!defaultOutputTemplateIsMovie){					alert("The render queue items were not added because they were not of a movie type.\nThe added render queue items were of type: "+outputExt.toUpperCase(), scriptName);				}			}		else		{			for (var i=0,lenI=renderQueueItems.length; i<lenI; i++)			{				renderQueueItems[i].remove();			}				}							}				app.endUndoGroup();			}	function IsMovieFormat( extension )	{		var movieFormat = false;		if( extension != null )		{			// These formats are all the ones included in DFusion, as well			// as all the formats in AE that don't contain [#####].			if( extension == "vdr" || extension == "wav" || extension == "dvs" ||				extension == "fb"  || extension == "omf" || extension == "omfi"||				extension == "stm" || extension == "tar" || extension == "vpr" ||				extension == "gif" || extension == "img" || extension == "flc" ||				extension == "flm" || extension == "mp3" || extension == "mov" ||				extension == "rm"  || extension == "avi" || extension == "wmv" ||				extension == "mpg" || extension == "m4a" || extension == "mpeg" || 				extension == "flv" )			{				movieFormat = true;			}		}		return movieFormat;	}	SPCreateWipRenderForSelectedComps();}