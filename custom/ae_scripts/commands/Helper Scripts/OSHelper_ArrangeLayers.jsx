	// OSHelper_ArrangeLayers_v1.0	// created by Paul Tuersley	// Dec 2015		// This script functions as a helper script for use with pt_OpenSesame and pt_OpenSesame Server only.	function OSHelperScript_Setup() {		// This function will be called by pt_OpenSesame when exporting the helper script options		// Set up any user editable options you want included in the export, including any default values		//if (OSHelperScript_Data.JSON) {} // Use this to query if OpenSesame is exporting JSON format. Values must be strings for TSV, CSV export but you can set up arrays for JSON exports		//OSHelperScript_Data.PostRender = true;	// By default a helper script is exported as being applied before a render. Use this to default it to being used as a post render script.		OSHelperScript_Data.CompID = "undefined";		OSHelperScript_Data.Layers = 0;	// layers to be arranged. 0 = all layers, ordered from top to bottom.....or specify layers numbers between semi-colons or in an array (JSON only)				// layers to have out points extended (footage may have been replaced by OpenSesame, but AE doesn't alter out points on a replace) 		OSHelperScript_Data.ExtendOutLayers = 0;	//0 = all layers, or specify layer numbers between semi-colons or in an array (JSON only). To extend no layers (unlikely as that's the point) set to a higher number than layers in comp. i.e. 666.		OSHelperScript_Data.ChangeCompDuration = true;	// choose to change the comp duration to match the out point of the last layer being arranged.	}	function OSHelperScript_Run() {				if (OSHelperScript_Data.CompID == undefined || OSHelperScript_Data.CompID == "undefined") {			// Use OSHelperScript_Data.Message to store a string only, containing any message you want OpenSesame to add to the log file. Including the word "error" will cause it to be flagged as such by OpenSesame.			OSHelperScript_Data.Message = "OS_ArrangeLayers error: No CompID specified";			return;		}		var theComp, x, y, layerArray, curLayer, prevLayer, extendOut, changeDuration;		var extendOutLayers = new Array();		var doneFirst = false;		var count = 0;		OSHelperScript_Data.CompID = parseInt(OSHelperScript_Data.CompID,10);				for (x = 1; x <= app.project.numItems; x++) {	// look for the comp with the specified ID			if (app.project.item(x).id == OSHelperScript_Data.CompID && app.project.item(x) instanceof CompItem) {				theComp = app.project.item(x);				break;			}		}			if (theComp == null) {			OSHelperScript_Data.Message = "OS_ArrangeLayers error: No comp found with ID " + OSHelperScript_Data.CompID;			return;		}		if (OSHelperScript_Data.Layers == undefined || OSHelperScript_Data.Layers == "undefined") {			OSHelperScript_Data.Message = "OS_ArrangeLayers error: No layers specified";			return;		}			if (OSHelperScript_Data.Layers instanceof Array) {	// it could already be an array if imported from a JSON file			layerArray = OSHelperScript_Data.Layers;		} else {			layerArray = OSHelperScript_Data.Layers.toString().split(";");	// otherwise, a string with numbers separated by semi-colons, so turn into an array of numbers		}		for (x = 0; x < layerArray.length; x++) {	// parse the numbers in case they were strings			layerArray[x] = parseInt(layerArray[x],10);		}			if (layerArray[0] == 0) {	// if zero was specifed, fill the array with all the comp layer numbers			for (x = 1; x <= theComp.numLayers; x++) {				layerArray[x-1] = x;			}		}		if (OSHelperScript_Data.ExtendOutLayers == undefined) {	// if ExtendOutLayers not specified, set it to extend out points for all layers			extendOutLayers.push(0);			} else {			if (OSHelperScript_Data.Layers instanceof Array) {				extendOutLayers = OSHelperScript_Data.ExtendOutLayers;			} else {				extendOutLayers = OSHelperScript_Data.ExtendOutLayers.toString().split(";");			}			for (x = 0; x < extendOutLayers.length; x++) {				extendOutLayers[x] = parseInt(extendOutLayers[x],10);			}		}		for (x = 0; x < layerArray.length; x++) {			if (!isNaN(layerArray[x]) && layerArray[x] <= theComp.numLayers) {	// if layer number is valid				curLayer = theComp.layer(layerArray[x]);				count ++;				if (prevLayer != null) {	// we don't want to change start time of the first layer, only subsequent layers					curLayer.startTime = prevLayer.outPoint - (curLayer.inPoint - curLayer.startTime);	// move layer start to directly after previous layer end, accounting for potentially trimmed in point				}								if (extendOutLayers[0] == 0) extendOut = true;				else {					extendOut = false;					for (y = 0; y < extendOutLayers.length; y++) {	// if extend out point isn't global, check if this layer was specified						if (extendOutLayers[y] == layerArray[x]) {							extendOut = true;							break;						}					}				}				if (extendOut) curLayer.outPoint = 10000;	// set out point to really big number. will only extend to footage's actual length				prevLayer = curLayer;			}		}			if (count == 0) {			OSHelperScript_Data.Message = "OS_ArrangeLayers error: No layers found";			return;		}		if (OSHelperScript_Data.ChangeCompDuration == undefined || OSHelperScript_Data.ChangeCompDuration == true || OSHelperScript_Data.ChangeCompDuration == "true") changeDuration = true;		else changeDuration = false;		if (changeDuration) theComp.duration = curLayer.outPoint;	// change comp duration to match out point of last arranged layer				OSHelperScript_Data.Message = "OS_ArrangeLayers: " + count + " layers arranged.";		if (changeDuration) OSHelperScript_Data.Message += " " + theComp.name + " duration is now " + theComp.duration;	}																			